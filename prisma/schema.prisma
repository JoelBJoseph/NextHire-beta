generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           Role             @default(STUDENT)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  profile        Profile?
  applications   Application[]
  accounts       Account[]
  sessions       Session[]
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?  @db.Text
  phone       String?
  address     String?
  resumeUrl   String?
  skills      String[] @default([])
  passingYear String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  education   Education[]
  experience  Experience[]
}

model Education {
  id           String   @id @default(cuid())
  degree       String
  institution  String
  year         String
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Experience {
  id           String   @id @default(cuid())
  position     String
  company      String
  duration     String
  description  String   @db.Text
  profileId    String
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Organization {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  logo        String?
  website     String?
  industry    String?
  location    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]
  jobOffers   JobOffer[]
}

model JobOffer {
  id            String        @id @default(cuid())
  title         String
  description   String        @db.Text
  location      String
  salary        String?
  type          String        @default("Full-time")
  experience    String?
  skills        String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  applications  Application[]
}

model Application {
  id          String        @id @default(cuid())
  status      Status        @default(PENDING)
  appliedDate DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resumeUrl   String?
  coverLetter String?       @db.Text
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  jobOffer    JobOffer      @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  jobOfferId  String

  @@unique([userId, jobOfferId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  date        DateTime
  time        String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  ORGANIZATION
  STUDENT
}

enum Status {
  PENDING
  SELECTED
  REJECTED
}

